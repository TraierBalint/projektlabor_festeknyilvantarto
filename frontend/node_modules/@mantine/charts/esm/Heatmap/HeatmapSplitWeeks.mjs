'use client';
import { jsx, Fragment } from 'react/jsx-runtime';
import { getColumns } from './get-columns/get-columns.mjs';
import { getHeatColor } from './get-heat-color/get-heat-color.mjs';

function HeatmapSplitWeeks({
  data,
  datesRange,
  rectSize,
  gap,
  rectRadius,
  min,
  max,
  colors,
  withTooltip,
  setHoveredRect,
  getRectProps,
  getStyles
}) {
  const rectSizeWithGap = rectSize + gap;
  const columns = getColumns(datesRange, true);
  return /* @__PURE__ */ jsx(Fragment, { children: columns.map((col, columnIndex) => {
    if (col.type === "spacer") {
      return /* @__PURE__ */ jsx(
        "g",
        {
          transform: `translate(${columnIndex * rectSizeWithGap}, 0)`
        },
        `spacer-${columnIndex}`
      );
    }
    const week = datesRange[col.weekIndex];
    const days = week.map((date, dayIndex) => {
      if (!date) {
        return null;
      }
      if (new Date(date).getMonth() !== col.month) {
        return null;
      }
      const hasValue = date in data && data[date] !== null;
      const rectValue = hasValue ? data[date] : null;
      return /* @__PURE__ */ jsx(
        "rect",
        {
          width: rectSize,
          height: rectSize,
          x: gap,
          y: dayIndex * rectSizeWithGap + gap,
          rx: rectRadius,
          "data-empty": !hasValue || void 0,
          fill: hasValue ? getHeatColor({ value: data[date], min, max, colors }) : void 0,
          onPointerEnter: withTooltip ? () => setHoveredRect({ date, value: rectValue }) : void 0,
          ...getRectProps?.({ date, value: rectValue }),
          ...getStyles("rect")
        },
        `${date}-${col.month}`
      );
    });
    return /* @__PURE__ */ jsx(
      "g",
      {
        transform: `translate(${columnIndex * rectSizeWithGap}, 0)`,
        "data-id": "week",
        children: days
      },
      `col-${col.weekIndex}-${col.month}-${columnIndex}`
    );
  }) });
}

export { HeatmapSplitWeeks };
//# sourceMappingURL=HeatmapSplitWeeks.mjs.map
