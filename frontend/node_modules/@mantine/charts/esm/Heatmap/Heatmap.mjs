'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useMemo } from 'react';
import { factory, useProps, useStyles, Box, Tooltip } from '@mantine/core';
import { getBoundaries } from './get-boundaries/get-boundaries.mjs';
import { getColumns, getFirstMonthColumnIndex } from './get-columns/get-columns.mjs';
import { getDatesRange } from './get-dates-range/get-dates-range.mjs';
import { getMonthsRange } from './get-months-range/get-months-range.mjs';
import { HeatmapSplitWeeks } from './HeatmapSplitWeeks.mjs';
import { HeatmapWeeks } from './HeatmapWeeks.mjs';
import { rotateWeekdaysNames } from './rotate-weekdays-names/rotate-weekdays-names.mjs';
import classes from './Heatmap.module.css.mjs';

const defaultProps = {
  monthLabels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  weekdayLabels: ["Sun", "Mon", "", "Wed", "", "Fri", ""],
  withOutsideDates: true,
  firstDayOfWeek: 1,
  rectSize: 10,
  weekdaysLabelsWidth: 30,
  monthsLabelsHeight: 14,
  gap: 1,
  rectRadius: 2,
  fontSize: 12,
  colors: [
    "var(--heatmap-level-1)",
    "var(--heatmap-level-2)",
    "var(--heatmap-level-3)",
    "var(--heatmap-level-4)"
  ]
};
const Heatmap = factory((_props, ref) => {
  const props = useProps("Heatmap", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    startDate,
    endDate,
    withMonthLabels,
    withWeekdayLabels,
    weekdayLabels,
    withOutsideDates,
    monthLabels,
    firstDayOfWeek,
    rectSize = 10,
    gap = 1,
    rectRadius,
    domain,
    colors,
    weekdaysLabelsWidth,
    monthsLabelsHeight,
    fontSize,
    getTooltipLabel,
    withTooltip,
    tooltipProps,
    getRectProps,
    splitMonths,
    attributes,
    ...others
  } = props;
  const getStyles = useStyles({
    name: "Heatmap",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    attributes,
    vars
  });
  const [hoveredRect, setHoveredRect] = useState(null);
  const rectSizeWithGap = rectSize + gap;
  const weekdaysOffset = withWeekdayLabels ? weekdaysLabelsWidth : 0;
  const monthsOffset = withMonthLabels ? monthsLabelsHeight : 0;
  const [min, max] = getBoundaries({ data, domain });
  const rotatedWeekdayLabels = useMemo(
    () => rotateWeekdaysNames(weekdayLabels, firstDayOfWeek),
    [weekdayLabels, firstDayOfWeek]
  );
  const datesRange = getDatesRange({
    startDate,
    endDate,
    withOutsideDates,
    firstDayOfWeek
  });
  const monthsRange = withMonthLabels || splitMonths ? getMonthsRange(datesRange) : [];
  const weeksProps = {
    data,
    datesRange,
    rectSize,
    gap,
    rectRadius,
    min,
    max,
    colors,
    withTooltip,
    setHoveredRect,
    getRectProps,
    getStyles
  };
  const weeks = splitMonths ? /* @__PURE__ */ jsx(HeatmapSplitWeeks, { ...weeksProps }) : /* @__PURE__ */ jsx(HeatmapWeeks, { ...weeksProps });
  const totalColumns = splitMonths ? getColumns(datesRange, splitMonths).length : datesRange.length;
  const computeMonthLabelX = (monthPosition, monthIndex) => {
    if (!splitMonths) {
      return monthPosition * rectSizeWithGap + gap + weekdaysOffset;
    }
    const firstMonth = monthsRange[monthIndex];
    const columns = getColumns(datesRange, splitMonths);
    const i = getFirstMonthColumnIndex(columns, firstMonth.month);
    const base = i >= 0 ? i : monthPosition;
    return (base + 1) * rectSizeWithGap + gap + weekdaysOffset;
  };
  const monthsLabelsNodes = withMonthLabels && monthLabels ? monthsRange.map((month, monthIndex) => {
    const minSize = splitMonths ? 2 : 3;
    if (month.size < minSize) {
      return null;
    }
    const monthLabel = monthLabels[month.month];
    return /* @__PURE__ */ jsx(
      "text",
      {
        x: computeMonthLabelX(month.position, monthIndex),
        y: monthsLabelsHeight - 4,
        width: month.size * rectSizeWithGap,
        fontSize,
        ...getStyles("monthLabel"),
        children: monthLabel
      },
      monthIndex
    );
  }) : null;
  const weekdayLabelsNodes = withWeekdayLabels && weekdayLabels ? rotatedWeekdayLabels.map((weekdayLabel, dayIndex) => /* @__PURE__ */ jsx(
    "text",
    {
      x: 0,
      y: (dayIndex + 1) * rectSizeWithGap - gap + monthsOffset,
      width: weekdaysLabelsWidth,
      fontSize,
      ...getStyles("weekdayLabel"),
      children: weekdayLabel
    },
    dayIndex
  )) : null;
  const label = getTooltipLabel && hoveredRect && withTooltip ? getTooltipLabel(hoveredRect) : null;
  return /* @__PURE__ */ jsxs(
    Box,
    {
      component: "svg",
      ref,
      width: rectSizeWithGap * totalColumns + gap + weekdaysOffset,
      height: rectSizeWithGap * 7 + gap + monthsOffset,
      ...getStyles("root"),
      ...others,
      children: [
        /* @__PURE__ */ jsx(
          Tooltip.Floating,
          {
            label,
            disabled: !withTooltip || !label,
            position: "top",
            ...tooltipProps,
            children: /* @__PURE__ */ jsxs("g", { transform: `translate(${weekdaysOffset}, ${monthsOffset})`, "data-id": "all-weeks", children: [
              withTooltip && /* @__PURE__ */ jsx(
                "rect",
                {
                  fill: "transparent",
                  width: rectSizeWithGap * totalColumns + gap,
                  height: rectSizeWithGap * 7 + gap
                }
              ),
              weeks
            ] })
          }
        ),
        weekdayLabelsNodes,
        monthsLabelsNodes
      ]
    }
  );
});
Heatmap.displayName = "@mantine/charts/Heatmap";
Heatmap.classes = classes;

export { Heatmap };
//# sourceMappingURL=Heatmap.mjs.map
