'use client';
'use strict';

function getColumns(datesRange, splitMonths) {
  if (!splitMonths) {
    return datesRange.map((week, weekIndex) => {
      const firstDay = week.find((d) => d !== null);
      const month = new Date(firstDay).getMonth();
      return { type: "column", month, weekIndex };
    });
  }
  const tmp = [];
  datesRange.forEach((week, weekIndex) => {
    const months = week.map((d) => d ? new Date(d).getMonth() : null);
    let firstMonth = null;
    let boundaryIndex = null;
    for (let i = 0; i < months.length; i += 1) {
      if (months[i] === null) {
        continue;
      }
      if (firstMonth === null) {
        firstMonth = months[i];
      } else if (months[i] !== firstMonth) {
        boundaryIndex = i;
        break;
      }
    }
    if (firstMonth === null) {
      return;
    }
    if (boundaryIndex === null) {
      tmp.push({ type: "column", month: firstMonth, weekIndex });
    } else {
      let nextMonth = null;
      for (let i = boundaryIndex; i < months.length; i += 1) {
        if (months[i] !== null) {
          nextMonth = months[i];
          break;
        }
      }
      if (nextMonth === null) {
        tmp.push({ type: "column", month: firstMonth, weekIndex });
      } else {
        tmp.push({ type: "column", month: firstMonth, weekIndex });
        tmp.push({ type: "column", month: nextMonth, weekIndex });
      }
    }
  });
  const columns = [];
  for (let i = 0; i < tmp.length; i += 1) {
    if (i > 0 && tmp[i].month !== tmp[i - 1].month) {
      columns.push({ type: "spacer" });
    }
    columns.push(tmp[i]);
  }
  return columns;
}
function getFirstMonthColumnIndex(columns, month) {
  for (let i = 0; i < columns.length; i += 1) {
    const c = columns[i];
    if (c.type === "column" && c.month === month) {
      return i;
    }
  }
  return -1;
}

exports.getColumns = getColumns;
exports.getFirstMonthColumnIndex = getFirstMonthColumnIndex;
//# sourceMappingURL=get-columns.cjs.map
