'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var getHeatColor = require('./get-heat-color/get-heat-color.cjs');

function HeatmapWeeks({
  data,
  datesRange,
  rectSize,
  gap,
  rectRadius,
  min,
  max,
  colors,
  withTooltip,
  setHoveredRect,
  getRectProps,
  getStyles
}) {
  const rectSizeWithGap = rectSize + gap;
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: datesRange.map((week, weekIndex) => {
    const days = week.map((date, dayIndex) => {
      if (!date) {
        return null;
      }
      const hasValue = date in data && data[date] !== null;
      const rectValue = hasValue ? data[date] : null;
      return /* @__PURE__ */ jsxRuntime.jsx(
        "rect",
        {
          width: rectSize,
          height: rectSize,
          x: gap,
          y: dayIndex * rectSizeWithGap + gap,
          rx: rectRadius,
          "data-empty": !hasValue || void 0,
          fill: hasValue ? getHeatColor.getHeatColor({ value: data[date], min, max, colors }) : void 0,
          onPointerEnter: withTooltip ? () => setHoveredRect({ date, value: rectValue }) : void 0,
          ...getRectProps?.({ date, value: rectValue }),
          ...getStyles("rect")
        },
        date
      );
    });
    return /* @__PURE__ */ jsxRuntime.jsx(
      "g",
      {
        transform: `translate(${weekIndex * rectSizeWithGap}, 0)`,
        "data-id": "week",
        children: days
      },
      weekIndex
    );
  }) });
}

exports.HeatmapWeeks = HeatmapWeeks;
//# sourceMappingURL=HeatmapWeeks.cjs.map
